#Author: Michael Gonzalez
#Course: CS 2302 Data Structures
#Lab 2 Part 4
#TA: Anindita Nath
#Purpose:The purpose of this part is to sort a Linked List using a Modified versions of quicksort
#where we only make recursive calls to where our middle point might be
#and return the middle elemnt.
#also we need to measure the number of comparisons this Quick sort makes to compare it to other sorting methods

import random 



#Node Functions
class Node(object):
    # Constructor
    def __init__(self, item, next=None):  
        self.item = item
        self.next = next 

def PrintNodes(N):
    if N != None:
        print(N.item, end=' ')
        PrintNodes(N.next)
        
def PrintNodesReverse(N):
    if N != None:
        PrintNodesReverse(N.next)
        print(N.item, end=' ')

#List Functions
class List(object):   
    # Constructor
    def __init__(self): 
        self.head = None
        self.tail = None
        
def IsEmpty(L):  
    return L.head == None     
        
def Append(L,x): 
    # Inserts x at end of list L
    if IsEmpty(L):
        L.head = Node(x)
        L.tail = L.head
    else:
        L.tail.next = Node(x)
        L.tail = L.tail.next    
        
def Print(L):
    # Prints list L's items in order using a loop
    temp = L.head
    while temp is not None:
        print(temp.item, end=' ')
        temp = temp.next
    print()  # New line 
    
    
def Copy(L):
    Xcopy = List()
    temp = L.head
    while temp is not None:
        Append(Xcopy,temp.item)
        temp = temp.next
    return Xcopy
    

def ElementAt(L,mid):
    if IsEmpty(L):
        return None
    else:
        temp = L.head
        while mid is not 0:
            temp = temp.next
            mid -= 1
        return temp.item
   
         
def GetLength(L):
    if IsEmpty(L):
        return 0
    else:
        count = 0
        temp = L.head
        while temp is not None:
            count += 1
            temp = temp.next
        return count               


def rank(L,n,Count):
    counter = Count
    if IsEmpty(L):
        return L
    Print(L)
    SmallList = List()
    LargeList = List()
    piv = L.head.item
    temp = L.head.next
    
    while temp is not None:
        if piv > temp.item:
            Append(SmallList,temp.item)
            counter += 1
            temp = temp.next
        else:
            
            Append(LargeList,temp.item)
            counter += 1
            temp = temp.next

#a)    Element with rank n is in the pivot  
    if n == GetLength(SmallList):
        counter += 1
        return piv,counter
#b)    Element with rank n is in SmallList    
    elif n >= GetLength(SmallList):
        counter += 1
        n = n - GetLength(SmallList)-1 
        return rank(LargeList,  n, counter)
#c)    Element with rank n is in LargeList  
    elif n <= GetLength(SmallList):
        counter += 1
        return rank(SmallList, n,counter)
            
def Median(L):
    C = Copy(L)
    x,Comp = rank(C,GetLength(C)//2,0)
    print("the # of Comparisons is: ",Comp)
    return x                
               

def genRanList(n):
    L = List()
    for i in range(n):
        x = random.randrange(0, 101, 1)
        Append(L,x)
    return L


    
size = 6


testList = genRanList(size)
#testList = List()  example from Dr. Flores
#Append(testList,30)
#Append(testList,70)
#Append(testList,20)
#Append(testList,10)
#Append(testList,40)
#Append(testList,60)
#Append(testList,50)
Print(testList)

mid = Median(testList)


print("the middle is",mid)
